name: sp500_automation

on:
  schedule:
    # Mo–Fr um 14:12 MESZ (12:12 UTC)
    - cron: '12 12 * * 1-5'
  workflow_dispatch:  # manuelles Auslösen

jobs:
  build-and-trade:
    runs-on: ubuntu-latest

    services:
      ibgateway:
        image: ghcr.io/gnzsnz/ib-gateway:stable          # korrigiertes Image
        env:
          TWS_USERID: ${{ secrets.IBKR_USER }}
          TWS_PASSWORD: ${{ secrets.IBKR_PASS }}
          TRADING_MODE: paper
        ports:
          - 4001:4001   # TWS-API-Endpunkt
          - 5000:5000   # Web-Login (Client Portal)
        options: >-    # Health-Check, damit der Service erst beim Laufen zählt
          --health-cmd="nc -z localhost 4001"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=12

    steps:
      # 1️⃣ Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Python 3.9 bereitstellen
      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3️⃣ Abhängigkeiten installieren
      - name: Install dependencies
        run: |
          pip install pandas requests ib_insync

      # 4️⃣ Warten, bis der IB Gateway Service bereit ist
      - name: Wait for IB Gateway API
        run: |
          echo "Warte auf IB Gateway API auf localhost:4001..."
          for i in {1..12}; do
            if nc -z localhost 4001; then
              echo "✅ IB Gateway API ist erreichbar."
              exit 0
            fi
            sleep 5
            echo "Noch nicht da, Versuch $i/12..."
          done
          echo "❌ IB Gateway API konnte nicht erreicht werden." >&2
          exit 1

      # 5️⃣ Pipeline ausführen und loggen
      - name: Run sp500_pipeline
        env:
          PAV_LOGFILE: sp500_pipeline.log
        run: |
          python sp500_pipeline.py 2>&1 | tee sp500_pipeline.log

      # 6️⃣ Trading-Agent ausführen und loggen
      - name: Run sp500_agent
        env:
          PAV_LOGFILE: sp500_agent.log
          PAV_LOGLEVEL: INFO
          IBKR_USER: ${{ secrets.IBKR_USER }}
          IBKR_PASS: ${{ secrets.IBKR_PASS }}
          API_HOST: localhost        # verbindet sich zum Service-Container
          API_PORT: '4001'
          UPRO_CONID: ${{ secrets.UPRO_CONID }}
        run: |
          python sp500_agent.py 2>&1 | tee sp500_agent.log

      # 7️⃣ Log-Dateien als Artefakt hochladen
      - name: Upload logs
        uses: actions/upload-artifact@v3
        with:
          name: pav-logs
          path: |
            sp500_pipeline.log
            sp500_agent.log