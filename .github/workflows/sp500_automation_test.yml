jobs:
  build-and-trade:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq netcat-openbsd
          pip install pandas requests ib_insync ibind

      - name: Pull & Start IBeam Gateway
        run: |
          docker pull voyz/ibeam:latest
          docker run -d --name ibgw \
            -e IBEAM_ACCOUNT="${{ secrets.IBEAM_ACCOUNT }}" \
            -e IBEAM_PASSWORD="${{ secrets.IBEAM_PASSWORD }}" \
            -p 5000:5000 voyz/ibeam:latest

      - name: Wait for IBeam to be ready
        run: |
          for i in {1..30}; do
            AUTH=$(curl -s http://localhost:5000/v1/api/iserver/auth/status \
              | jq -r .auth || echo ERROR)
            echo "Try $i: auth=$AUTH"
            if [ "$AUTH" = "SUCCESS" ]; then
              echo "✅ IBeam ready"
              exit 0
            fi
            sleep 5
          done
          echo "❌ IBeam did not become ready in time" >&2
          exit 1

      - name: Authenticate CPAPI headless
        run: |
          BASE=http://localhost:5000/v1/api/iserver
          COOKIE=cookies.txt
          set -eux

          # 1) init CSRF & cookies
          curl -fsSL "$BASE/auth/authorize" -c "$COOKIE" >/dev/null

          # 2) login
          curl -fsSL -X POST "$BASE/auth/login" \
            -H 'Content-Type: application/json' \
            -b "$COOKIE" -c "$COOKIE" \
            -d "{\"user\":\"${{ secrets.IBEAM_ACCOUNT }}\",\"password\":\"${{ secrets.IBEAM_PASSWORD }}\"}"

          # 3) get apiToken
          API_TOKEN=$(curl -fsSL "$BASE/auth/validate" -b "$COOKIE" | jq -r .apiToken)
          echo "Got API_TOKEN: $API_TOKEN"
          echo "API_TOKEN=$API_TOKEN" >> $GITHUB_ENV

          # 4) poll until auth==SUCCESS
          until curl -fsSL -H "Authorization: Bearer $API_TOKEN" -b "$COOKIE" \
            "$BASE/auth/status" | jq -e '.auth=="SUCCESS"' >/dev/null; do
            echo "Waiting for auth…"
            sleep 5
          done
          echo "✅ Authenticated"

      - name: Print Paper Trading Cash Balance
        run: |
          BASE=http://localhost:5000/v1/api/iserver
          COOKIE=cookies.txt
          set -eux

          # Paper-Konto ermitteln
          ACCOUNT_ID=$(curl -fsSL -H "Authorization: Bearer $API_TOKEN" -b "$COOKIE" \
            "$BASE/account" | jq -r '.[] | select(.accountType=="PAPER") | .accountId')
          echo "Using PAPER account: $ACCOUNT_ID"

          # Ledger & Cash Balance
          BALANCE=$(curl -fsSL -H "Authorization: Bearer $API_TOKEN" -b "$COOKIE" \
            "$BASE/portfolio/$ACCOUNT_ID/ledger" \
            | jq -r '.USD.cashbalance')
          echo "Paper Trading Cash Balance (USD): $BALANCE"